## Flox Environment Manifest -----------------------------------------
##
##   _Everything_ you need to know about the _manifest_ is here:
##
##               https://flox.dev/docs/concepts/manifest
##
## -------------------------------------------------------------------
# Flox manifest version managed by Flox CLI
version = 1

## Install Packages --------------------------------------------------
##  $ flox install gum  <- puts a package in [install] section below
##  $ flox search gum   <- search for a package
##  $ flox show gum     <- show all versions of a package
## -------------------------------------------------------------------
[install]
# Core build tools
autoconf.pkg-path = "autoconf"
automake.pkg-path = "automake"
libtool.pkg-path = "libtool"
gnumake.pkg-path = "gnumake"
pkg-config.pkg-path = "pkg-config"
zlib.pkg-path = "zlib"

# Compiler and core libraries
gcc.pkg-path = "gcc"
gcc.systems = ["x86_64-linux", "aarch64-linux"]
clang.pkg-path = "clang"
clang.systems = ["x86_64-darwin", "aarch64-darwin"]
IOKit.pkg-path = "darwin.apple_sdk.frameworks.IOKit"
IOKit.systems = ["x86_64-darwin", "aarch64-darwin"]
CoreFoundation.pkg-path = "darwin.apple_sdk.frameworks.CoreFoundation"
CoreFoundation.priority = 2
CoreFoundation.systems = ["x86_64-darwin", "aarch64-darwin"]

# Essential audio libraries (absolutely required)
libsndfile.pkg-path = "libsndfile"
libltdl.pkg-path = "libtool"  # provides libltdl

# Audio codec libraries
flac.pkg-path = "flac"
lame.pkg-path = "lame"
libmad.pkg-path = "libmad"
libvorbis.pkg-path = "libvorbis"
libogg.pkg-path = "libogg"
opusfile.pkg-path = "opusfile"
gsm.pkg-path = "gsm"
wavpack.pkg-path = "wavpack"
"barstoolbluz/ffmpeg-linux".pkg-path = "ffmpeg"
"barstoolbluz/ffmpeg-linux".systems = ["x86_64-linux"]
"barstoolbluz/ffmpeg-linux".priority = 7
"barstoolbluz/ffmpeg-darwin".pkg-path = "barstoolbluz/ffmpeg-darwin"
"barstoolbluz/ffmpeg-darwin".systems = ["x86_64-darwin"]
"barstoolbluz/ffmpeg-darwin".priority = 7
"barstoolbluz/ffmpeg-darwin".pkg-group = "top-level"
ffmpeg.pkg-path = "ffmpeg"
ffmpeg.systems = ["aarch64-linux", "aarch64-darwin"]
ffmpeg.priority = 7


# Metadata and utility libraries
libid3tag.pkg-path = "libid3tag"
file.pkg-path = "file"  # provides libmagic

# Audio I/O libraries (Linux)
alsa-lib.pkg-path = "alsa-lib"
alsa-lib.systems = ["x86_64-linux", "aarch64-linux"]
libpulseaudio.pkg-path = "libpulseaudio"
libpulseaudio.systems = ["x86_64-linux", "aarch64-linux"]

# Effects libraries
ladspa-sdk.pkg-path = "ladspa-sdk"
ladspa-sdk.systems = ["x86_64-linux", "aarch64-linux"]


## Environment Variables ---------------------------------------------
##  ... available for use in the activated environment
##      as well as [hook], [profile] scripts and [services] below.
## -------------------------------------------------------------------
[vars]
# INTRO_MESSAGE = "It's gettin' Flox in here"


## Activation Hook ---------------------------------------------------
##  ... run by _bash_ shell when you run 'flox activate'.
## -------------------------------------------------------------------
[hook]
on-activate = '''
export LD_LIBRARY_PATH="$FLOX_ENV_LIB_DIRS:${LD_LIBRARY_PATH:-}"
export PKG_CONFIG_PATH="$FLOX_ENV_LIB_DIRS/pkgconfig:${PKG_CONFIG_PATH:-}"
'''


## Profile script ----------------------------------------------------
## ... sourced by _your shell_ when you run 'flox activate'.
## -------------------------------------------------------------------
[profile]
# common = '''
#   gum style \
#   --foreground 212 --border-foreground 212 --border double \
#   --align center --width 50 --margin "1 2" --padding "2 4" \
#     $INTRO_MESSAGE
# '''
## Shell-specific customizations such as setting aliases go here:
# bash = ...
# zsh  = ...
# fish = ...


## Services ---------------------------------------------------------
##  $ flox services start             <- Starts all services
##  $ flox services status            <- Status of running services
##  $ flox activate --start-services  <- Activates & starts all
## ------------------------------------------------------------------
[services]
# myservice.command = "python3 -m http.server"


## Include ----------------------------------------------------------
## ... environments to create a composed environment
## ------------------------------------------------------------------
[include]
# environments = [
#     { dir = "../common" }
# ]


## Build and publish your own packages ------------------------------
##  $ flox build
##  $ flox publish
## ------------------------------------------------------------------
[build]
sox.description = "Måns Rullgård's fork of SoX with DSD support"
sox.version = "14.4.2"
sox.sandbox = "pure"
sox.command = '''
set -euo pipefail
mkdir -p "$out"

echo "Checking and fixing math.h include if needed..."
if ! grep -q "math.h" src/sox_sample_test.h; then
    echo "Adding math.h include to src/sox_sample_test.h"
    sed -i '/^#include <assert.h>$/a #include <math.h>' src/sox_sample_test.h
else
    echo "math.h include already present"
fi

echo "Generating configure script..."
autoreconf -fiv

echo "Configuring SoX with maximum codec support..."
./configure \
    --prefix="$out" \
    --enable-shared \
    --enable-static \
    --with-flac \
    --with-lame \
    --with-mad \
    --with-oggvorbis \
    --with-opus \
    --with-sndfile \
    --with-wavpack \
    --with-mp3 \
    --with-gsm \
    --with-lpc10 \
    --with-id3tag \
    --with-ladspa \
    --with-magic \
    --without-ao \
    --without-oss \
    --without-coreaudio \
    --with-alsa \
    --with-pulseaudio \
    --with-ffmpeg

echo "Building SoX..."
make -j$(nproc)

echo "Installing SoX to $out..."
make install

echo "✓ SoX build complete!"
echo "Binary installed at: $out/bin/sox"

# Set library path for testing
export LD_LIBRARY_PATH="$out/lib:${LD_LIBRARY_PATH:-}"

# Show what we built
echo ""
echo "=== Build Summary ==="
ls -la "$out/bin/"
LD_LIBRARY_PATH="$out/lib:${LD_LIBRARY_PATH:-}" "$out/bin/sox" --version
echo ""
echo "=== Supported Formats ==="
LD_LIBRARY_PATH="$out/lib:${LD_LIBRARY_PATH:-}" "$out/bin/sox" --help-format=all 2>/dev/null | head -20 || true
echo ""
echo "=== DSD Format Check ==="
LD_LIBRARY_PATH="$out/lib:${LD_LIBRARY_PATH:-}" "$out/bin/sox" --help-format=dsf 2>/dev/null || echo "DSF not found"
LD_LIBRARY_PATH="$out/lib:${LD_LIBRARY_PATH:-}" "$out/bin/sox" --help-format=dff 2>/dev/null || echo "DFF not found"

#if [ "$(uname)" = "Linux" ]; then
#  remove-references-to -t "$(which gcc | xargs realpath | sed -E 's#^(/nix/store/[^/]+).*#\1#')" "$out/bin/sox"
#fi
'''


## Other Environment Options -----------------------------------------
[options]
# Systems that environment is compatible with
# systems = [
#   "aarch64-darwin",
#   "aarch64-linux",
#   "x86_64-darwin",
#   "x86_64-linux",
# ]
# Uncomment to disable CUDA detection.
# cuda-detection = false
